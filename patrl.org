#+TITLE: Patrick Elliott's Emacs 24 Configuration

* Resources

I lifted much of this from the following sources:

- [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs 24 Configuration]]
- [[http://www.swaroopch.com/2013/10/17/emacs-configuration-tutorial/][Getting started with my own .emacs.d]]
- [[https://github.com/eschulte/emacs24-starter-kit/][The Literate Programming fork of the original emacs starter kit]]

...and probably other places too.

* Configuration (general)

** User details

This ensures that emacs knows my full name and email address.

#+begin_src emacs-lisp
(setq user-full-name "Patrick Elliott")
(setq user-mail-address "patrick.d.elliott@gmail.com")
#+end_src

** Package management

*** Cask

I use [[https://github.com/cask/cask][cask]] to manage my emacs packages. 

#+begin_src emacs-lisp
(require 'cask "~/.cask/cask.el")
(cask-initialize)
#+end_src

*** Pallet

[[https://github.com/rdallasgray/pallet][Pallet]] works in tandem with ~cask~: it ensures that my ~Cask~ file is kept in sync with the packages I install/uninstall via ~M-x list-packages~.

#+begin_src emacs-lisp
(require 'pallet)
(pallet-mode t)
#+end_src

** Start-up

This gets rid of the initial splash screen, as well as the message in the scratch buffer. Since I spend most of my time using emacs to take notes in ~deft-mode~, I set this as the initial major mode.

#+begin_src emacs-lisp
(setq inhibit-splash-screen t initial-scratch-message nil
      initial-major-mode 'deft)
#+end_src

** Backup files

Stops emacs from creating backup files which have a habit of cluttering up directories.

#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

** Yes-and-no

Allow single character responses to yes/no questions.

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Keybindings

Miscellaneous keybindings that don't belong anywhere else.

#+begin_src emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
#+end_src

** Parentheses

#+begin_src emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+end_src


** Tool bar

Gets rid of the tool bar.

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** Display settings

*** Olivetti

Enable olivetti in text-mode (and derived modes) to provide margins.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'olivetti-mode)
(setq olivetti-body-width 110)
#+end_src

*** Theme

Since I spend an awful lot of time writing in emacs, I need it to be easy on the eyes. I Use the ~solarized-light~ theme.

#+begin_src emacs-lisp
(load-theme 'solarized-light t)
#+end_src

*** Font

[[https://github.com/belluzj/fantasque-sans][Fantasque Sans Mono]] is a fantastic monospace font for coding. Emacs will default to the system default if fantasque isn't installed. If you don't like fantasque sans (it's rather idiosyncratic), I can also recommend [[https://github.com/mozilla/Fira][Fira Sans Mono]] as an alternative.

#+begin_src emacs-lisp
(set-frame-font "Fantasque Sans Mono"-14)
#+end_src

**** TODO terminal theming
     
** Writing

Some utilities to improve emacs as a tool for writing in prose and various markup languages.

*** Spell-checking

Enables flyspell spellchecking in text-mode (and derived modes).

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src



*** INPROGRESS Adjust ~olivetti~ margins
*** TODO ~writeroom-mode~

Check out writeroom mode as an alternative to ~olivetti~.

** Org

This puts a timestamp on completed tasks.

#+begin_src emacs-lisp
(setq org-log-done t)
#+end_src

This sets up my org keywords, and highlights the ~INPROGRESS~.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
      org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))
#+end_src

** Deft

[[http://jblevins.org/projects/deft/][Deft]] is one of the modes I use most frequently. It allows me to quickly create, manage, and sort through notes. Complemented with ~org-mode~, it's the perfect tool for daily note-taking.

This sets org-mode as the default mode for deft.

#+begin_src emacs-lisp
(setq deft-extension "org")
(setq deft-text-mode 'org-mode)

(setq deft-use-filter-string-for-filename "deft")
#+end_src

This sets ~f9~ as the deft keyboard shortcut.

#+begin_src emacs-lisp
(global-set-key (kbd "<f9>") 'deft)
#+end_src

** LaTeX

*** Set-up

Enable parse on load and save.

#+begin_src emacs-lisp
(setq TeX-parse-self t)
(setq TeX-auto-save t)
(setq TeX-save-query nil)
#+end_src

*** ~Latexmk~

Sets up ~auctex~ to allow ~latexmk~ as a compilation command.

#+begin_src emacs-lisp
  (require 'auctex-latexmk)
    (auctex-latexmk-setup)
#+end_src

*** Referencing

Enable reftex in latex- and LaTeX-modes.

#+begin_src emacs-lisp
(require 'reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(add-hook 'latex-mode-hook 'turn-on-reftex)
#+end_src

*** TODO line numbering

~linum-mode~ currently has a bug that wipes out margin settings, rendering it incompatible with ~olivetti~. Need to figure out a way of maintaining nice margins while also having line numbering.

** Markdown

*** Settings

Automatically load markdown-mode for .md files

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.md$"
  . markdown-mode)) (add-to-list 'auto-mode-alist '("\\.mdown$"
						    . markdown-mode))
#+end_src

*** Pandoc

Loads ~pandoc-mode~ when in ~markdown-mode~ automatically, and use ~pandoc~ as default compiler in ~markdown-mode~.

#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'pandoc-mode)
(setq markdown-command "pandoc --smart - markdown -t html")
#+end_src

** Utilities

*** Smex

Enables history and searching on top of ~M-x~ using ~smex~.

#+begin_src emacs-lisp
(setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src


* System-specific configuration
   
*** Directories
    

Determines where ~deft~ notes get saved.

#+begin_src emacs-lisp
(setq deft-directory "~/Dropbox/deft")
#+end_src

*** Pandoc

Since I installed ~pandoc~ via ~cabal~, I need to explicit declare where to find the haskell script.

#+begin_src emacs-lisp
(setq pandoc-binary "~/.cabal/bin/pandoc")
#+end_src
